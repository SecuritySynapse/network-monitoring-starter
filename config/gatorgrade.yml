setup: |
  echo "üêä Start to install dependencies ..."
  echo "üêä Note: Will not install dependencies if available"
  cd networkmonitor && poetry install
  echo "üêä ... Done installing dependencies"
---

# Checks on Files {{{

# perform checks on a file
- networkmonitor/networkmonitor/main.py:
    - description: Ensure that the main.py file exists in the networkmonitor/networkmonitor/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for main.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in main.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 3
        exact: false
    - description: Create a sufficient number of single-line comments in main.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 5
        exact: false

# perform checks on a file
- networkmonitor/networkmonitor/client.py:
    - description: Ensure that the client.py file exists in the networkmonitor/networkmonitor/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for client.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in client.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 3
        exact: false
    - description: Create a sufficient number of single-line comments in client.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 5
        exact: false

# perform checks on a file
- networkmonitor/networkmonitor/server.py:
    - description: Ensure that the server.py file exists in the networkmonitor/networkmonitor/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for server.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in server.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 3
        exact: false
    - description: Create a sufficient number of single-line comments in server.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 5
        exact: false

# perform checks on a file
- writing/reflection.md:
    - description: Ensure that the reflection.md file exists in the writing/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for the reflection
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Delete the 'Add Your Name Here' prompt in the reflection file
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in reflection.md
      check: MatchFileFragment
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this project."
        count: 2
        exact: true
    - description: Confirm that the markdown file has the correct number of headers
      check: CountMarkdownTags
      options:
        tag: heading
        count: 5
        exact: false
    - description: Confirm that the markdown file has the correct number of fenced code blocks
      check: CountMarkdownTags
      options:
        tag: code_block
        count: 6
        exact: false

# }}}

# Check Output {{{

# run a check
- description: Pass the source code formatting checks run by ruff
  command: cd networkmonitor && poetry run task format

# run a check
- description: Pass the source code linting checks run by ruff
  command: cd networkmonitor && poetry run task check

# run a check
- description: Pass the linting checks run by mypy
  command: cd networkmonitor && poetry run task mypy

# run a check
- description: Pass the linting checks run by pymarkdown
  command: cd networkmonitor && poetry run task markdownlint

# run a check
- description: Pass the undocumented function checks run by symbex
  command: cd networkmonitor && poetry run task symbex-documented

# run a check
- description: Pass the untyped function checks run by symbex
  command: cd networkmonitor && poetry run task symbex-typed

# }}}

# Commits {{{

# count number of commits in the GitHub repository
- description: Have at least a specific minimum of commits in repository
  check: CountCommits
  options:
    count: 10

# }}}
